////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//	ADD_ITMSPL_GLOBAL_EFFECT_EX
//	– "parameter1" "duration", "savetype", "special" can now take numerical expressions
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION "ADD_ITMSPL_GLOBAL_EFFECT_EX"
BEGIN
	// Initialization
	PATCH_IF (BUFFER_LENGTH > 0x71) THEN BEGIN
		PATCH_IF (~%DEST_EXT%~ STRING_EQUAL_CASE ~spl~) BEGIN
			SET "hdr_size" = 0x28
		END ELSE BEGIN
			SET "hdr_size" = 0x38
		END
		READ_LONG 0x64 "abil_off"
		READ_SHORT 0x68 "abil_num"
		READ_LONG 0x6a "fx_off"
		READ_SHORT 0x6e "eqfx_index"
		READ_SHORT 0x70 "eqfx_num"

		/* If insert_point is defined and valid, use it,
			 if undefined, default to 0,
			 otherwise, insert at the end
		*/
		SET "inserted" = IS_AN_INT "___#insert_point" AND
						"%___#insert_point%" >= 0 AND
						"%___#insert_point%" < "%eqfx_num%" ?
						"%___#insert_point%" : !IS_AN_INT "___#insert_point" ? 0 : "%eqfx_num%"

		INSERT_BYTES ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30) 0x30

		//WRITE_SHORT  (fx_off + eqfx_index + inserted * 0x30) ___#opcode
		PATCH_MATCH "%___#opcode%" WITH
			"[0-9]+" WHEN (("%___#opcode%" >= 0) AND ("%___#opcode%" <= 367)) BEGIN
				WRITE_SHORT ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30) "%___#opcode%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ADD_ITMSPL_GLOBAL_EFFECT_EX: ~opcode~ must be an integer belonging to the interval [0,367] (you provided ~%___#opcode%~)"
		END

		//WRITE_BYTE  (fx_off + eqfx_index + inserted * 0x30 + 0x02) ___#target
		PATCH_MATCH "%___#target%" WITH
			"[0-9]" BEGIN
				WRITE_BYTE ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x02) "%___#target%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ADD_ITMSPL_GLOBAL_EFFECT_EX: ~target~ must be an integer belonging to the interval [0,9] (you provided ~%___#target%~)"
		END

		//WRITE_BYTE  (fx_off + eqfx_index + inserted * 0x30 + 0x03) ___#power
		PATCH_MATCH "%___#power%" WITH
			"[0-9]+" BEGIN
				WRITE_BYTE ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x03) "%___#power%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ADD_ITMSPL_GLOBAL_EFFECT_EX: ~power~ must be an integer greater or equal than 0 (you provided ~%___#power%~)"
		END

		//WRITE_LONG   (fx_off + eqfx_index + inserted * 0x30 + 0x04) parameter1
		LPF "EVALUATE_EXPRESSION"
		INT_VAR
			"effect_number" = "%___#opcode%"
		STR_VAR
			"expression" = "%___#parameter1%"
		RET
			"___#parameter1" = "value"
		END
		WRITE_LONG ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x04) "%___#parameter1%"

		//WRITE_LONG   (fx_off + eqfx_index + inserted * 0x30 + 0x08) ___#parameter2
		LPF "EVALUATE_EXPRESSION"
		INT_VAR
			"effect_number" = "%___#opcode%"
		STR_VAR
			"expression" = "%___#parameter2%"
		RET
			"___#parameter2" = "value"
		END
		WRITE_LONG ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x08) "%___#parameter2%"

		//WRITE_BYTE   (fx_off + eqfx_index + inserted * 0x30 + 0x0c) ___#timing
		PATCH_MATCH "%___#timing%" WITH
			"[0-9]" "10" "4096" BEGIN
				WRITE_BYTE ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x0c) "%___#timing%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ADD_ITMSPL_GLOBAL_EFFECT_EX: ~timing~ must be an integer belonging to the interval [0,9], 10, or 4096 (you provided ~%___#timing%~)"
		END

		//WRITE_BYTE   (fx_off + eqfx_index + inserted * 0x30 + 0x0d) ___#resist_dispel
		PATCH_MATCH "%___#resist_dispel%" WITH
			"[0-3]" BEGIN
				WRITE_BYTE ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x0d) "%___#resist_dispel%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ADD_ITMSPL_GLOBAL_EFFECT_EX: ~resist_dispel~ must be an integer belonging to the interval [0,3] (you provided ~%___#resist_dispel%~)"
		END

		//WRITE_LONG   (fx_off + eqfx_index + inserted * 0x30 + 0x0e) duration
		LPF "EVALUATE_EXPRESSION"
		STR_VAR
			"expression" = "%___#duration%"
		RET
			"___#duration" = "value"
		END
		WRITE_LONG ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x0e) "%___#duration%"

		//WRITE_BYTE   (fx_off + eqfx_index + inserted * 0x30 + 0x12) ___#probability1
		PATCH_MATCH "%___#probability1%" WITH
			"[0-9]+" WHEN (("%___#probability1%" >= 0) AND ("%___#probability1%" <= 100)) BEGIN
				WRITE_BYTE ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x12) "%___#probability1%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ADD_ITMSPL_GLOBAL_EFFECT_EX: ~probability1~ must be an integer belonging to the interval [0,100] (you provided ~%___#probability1%~)"
		END

		//WRITE_BYTE   (fx_off + eqfx_index + inserted * 0x30 + 0x13) ___#probability2
		PATCH_MATCH "%___#probability2%" WITH
			"[0-9]+" WHEN (("%___#probability2%" >= 0) AND ("%___#probability2%" <= 100)) BEGIN
				WRITE_BYTE ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x13) "%___#probability2%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ADD_ITMSPL_GLOBAL_EFFECT_EX: ~probability2~ must be an integer belonging to the interval [0,100] (you provided ~%___#probability2%~)"
		END

		WRITE_EVALUATED_ASCII ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x14) ~%___#resource%~ #8

		//WRITE_LONG   (fx_off + eqfx_index + inserted * 0x30 + 0x1c) ___#dicenumber
		PATCH_MATCH "%___#dicenumber%" WITH
			"[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x1c) "%___#dicenumber%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ADD_ITMSPL_GLOBAL_EFFECT_EX: ~dicenumber~ must be an integer greater or equal than 0 (you provided ~%___#dicenumber%~)"
		END

		//WRITE_LONG   (fx_off + eqfx_index + inserted * 0x30 + 0x20) ___#dicesize
		PATCH_MATCH "%___#dicesize%" WITH
			"[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x20) "%___#dicesize%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ADD_ITMSPL_GLOBAL_EFFECT_EX: ~dicesize~ must be an integer greater or equal than 0 (you provided ~%___#dicesize%~)"
		END

		//WRITE_LONG   (fx_off + eqfx_index + inserted * 0x30 + 0x24) savetype
		LPF "EVALUATE_EFFECT_SAVETYPE"
		STR_VAR
			"input" = "%___#savetype%"
		RET
			"___#savetype" = "output"
		END
		WRITE_LONG ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x24) "%___#savetype%"

		//WRITE_LONG   (fx_off + eqfx_index + inserted * 0x30 + 0x28) ___#savebonus
		PATCH_MATCH "%___#savebonus%" WITH
			"[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x28) "%___#savebonus%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ADD_ITMSPL_GLOBAL_EFFECT_EX: ~savebonus~ must be a (possibly signed) integer (you provided ~%___#savebonus%~)"
		END

		LPF "EVALUATE_EXPRESSION"
		INT_VAR
			"effect_number" = "%___#opcode%"
		STR_VAR
			"expression" = "%___#special%"
		RET
			"___#special" = "value"
		END
		WRITE_LONG ("%fx_off%" + "%eqfx_index%" + "%inserted%" * 0x30 + 0x2c) "%___#special%"

		//correcting global effects number
		WRITE_SHORT 0x70 ("%eqfx_num%" + 1)

		//correcting 1st effect ___#index1es
		FOR ("index2" = 0 ; "%index2%" < "%abil_num%" ; "index2" = "%index2%" + 1) BEGIN
			READ_SHORT ("%abil_off%" + "%index2%" * "%hdr_size%" + 0x20) "1effect_index"
			PATCH_IF ("%1effect_index%" > "%eqfx_index%") //if abilility after eq effects
						OR (("%1effect_index%" == "%eqfx_index%") AND ("%eqfx_num%" == 0)) BEGIN
				WRITE_SHORT ("%abil_off%" + "%index2%" * "%hdr_size%" + 0x20) ("%1effect_index%" + 1) //increase 1 effect index1 by 1
			END
		END
		//no offsets to correct
	END
END

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//// ADD_CRE_EFFECT_EX
//// – "parameter1", "parameter2" "duration", "savetype", "special" can now take numerical expressions
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION "ADD_CRE_EFFECT_EX"
BEGIN
	LAUNCH_PATCH_FUNCTION ~FJ_CRE_VALIDITY~ RET "valid" END
	PATCH_IF ("%valid%") BEGIN
		PATCH_WITH_SCOPE BEGIN
			READ_ASCII 0x0 "signature"
			READ_BYTE 0x33 "effVersion"
			PATCH_IF (~%signature%~ STRING_COMPARE_CASE ~CRE V1.0~) THEN BEGIN
				PATCH_FAIL ~"%signature%" not supported in ADD_CRE_EFFECT_EX~
			END
			PATCH_IF ("%effVersion%" != 1) BEGIN
				PATCH_FAIL ~ADD_CRE_EFFECT_EX and EFF version is %effVersion%~
			END
		END

		READ_LONG 0x2c4 "fx_off"
		READ_LONG 0x2c8 "fx_num"

		/* If insert_point is greater than or equal to 0 and less than num_fx, use it as a value
		 * Otherwise, insert at num_fx
		 * The function should use 0 as its default value
		 */
		SET "inserted" = IS_AN_INT "___#insert_point" AND
						"%___#insert_point%" >= 0 AND
						"%___#insert_point%" < "%fx_num%" ? "%___#insert_point%" : "%fx_num%"

		INSERT_BYTES ("%fx_off%" + "%inserted%" * 0x108) 0x108

		//    WRITE_ASCII ___#fx_off + inserted * 0x108 ~EFF ~ #4
		//    WRITE_ASCII (___#fx_off + inserted * 0x108 + 4) ~V2.0~ #4

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x8) ___#opcode
		PATCH_MATCH "%___#opcode%" WITH
			"[0-9]+" WHEN (("%___#opcode%" >= 0) AND ("%___#opcode%" <= 367)) BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x8) "%___#opcode%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ~___#ADD_CRE_EFFECT~: ~opcode~ must be an integer belonging to the interval [0,367] (you provided ~%___#opcode%~)"
		END

		// Technically speaking, ~target~ is irrelevant, effect will affect only the attached CRE file.
		// We will allow only `1|Self`
		//WRITE_LONG (fx_off + inserted * 0x108 + 0xc) ___#target
		PATCH_MATCH "%___#target%" WITH
			"1" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0xc) "%___#target%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ~___#ADD_CRE_EFFECT~: ~target~ must be 1 (Self) (you provided ~%___#target%~)"
		END

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x10) ___#power
		PATCH_MATCH "%___#power%" WITH
			"[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x10) "%___#power%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ~___#ADD_CRE_EFFECT~: ~power~ must be an integer greater or equal than 0 (you provided ~%___#power%~)"
		END

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x14) ___#parameter1
		LPF "EVALUATE_EXPRESSION"
		INT_VAR
			"effect_number" = "%___#opcode%"
		STR_VAR
			"expression" = "%___#parameter1%"
		RET
			"___#parameter1" = "value"
		END
		WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x14) "%___#parameter1%"

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x18) ___#parameter2
		LPF "EVALUATE_EXPRESSION"
		INT_VAR
			"effect_number" = "%___#opcode%"
		STR_VAR
			"expression" = "%___#parameter2%"
		RET
			"___#parameter2" = "value"
		END
		WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x18) "%___#parameter2%"

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x1c) ___#timing
		PATCH_MATCH "%___#timing%" WITH
			"1" "4" "9" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x1c) "%___#timing%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ~___#ADD_CRE_EFFECT~: ~timing~ must be 'Permanent' (1, 4, or 9) (you provided ~%___#timing%~)"
		END

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x20) ___#duration
		PATCH_MATCH "%___#duration%" WITH
			"[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x20) "%___#duration%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ~___#ADD_CRE_EFFECT~: ~duration~ must be an integer greater or equal than 0 (you provided ~%___#duration%~)"
		END

		//WRITE_SHORT (fx_off + inserted * 0x108 + 0x24) ___#probability1
		PATCH_MATCH "%___#probability1%" WITH
			"[0-9]+" WHEN (("%___#probability1%" >= 0) AND ("%___#probability1%" <= 100)) BEGIN
				WRITE_SHORT ("%fx_off%" + "%inserted%" * 0x108 + 0x24) "%___#probability1%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~probability1~ must be an integer belonging to the interval [0,100] (you provided ~%___#probability1%~)"
		END

		//WRITE_SHORT (fx_off + inserted * 0x108 + 0x26) ___#probability2
		PATCH_MATCH "%___#probability2%" WITH
			"[0-9]+" WHEN (("%___#probability2%" >= 0) AND ("%___#probability2%" <= 100)) BEGIN
				WRITE_SHORT ("%fx_off%" + "%inserted%" * 0x108 + 0x26) "%___#probability2%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~probability2~ must be an integer belonging to the interval [0,100] (you provided ~%___#probability2%~)"
		END

		WRITE_EVALUATED_ASCII ("%fx_off%" + "%inserted%" * 0x108 + 0x28) ~%___#resource%~ #8

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x30) ___#dicenumber
		PATCH_MATCH "%___#dicenumber%" WITH
			"[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x30) "%___#dicenumber%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~dicenumber~ must be an integer greater or equal than 0 (you provided ~%___#dicenumber%~)"
		END

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x34) ___#dicesize
		PATCH_MATCH "%___#dicesize%" WITH
			"[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x34) "%___#dicesize%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~dicesize~ must be an integer greater or equal than 0 (you provided ~%___#dicesize%~)"
		END

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x38) ___#savetype
		LPF "EVALUATE_EFFECT_SAVETYPE"
		STR_VAR
			"input" = "%___#savetype%"
		RET
			"___#savetype" = "output"
		END
		WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x38) "%___#savetype%"

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x3c) ___#savebonus
		PATCH_MATCH "%___#savebonus%" WITH
			"-?[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x3c) "%___#savebonus%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~savebonus~ must be a (possibly signed) integer (you provided ~%___#savebonus%~)"
		END

		LPF "EVALUATE_EXPRESSION"
		INT_VAR
			"effect_number" = "%___#opcode%"
		STR_VAR
			"expression" = "%___#special%"
		RET
			"___#special" = "value"
		END
		WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x40) "%___#special%"

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x44) ___#primary_type
		PATCH_MATCH "%___#primary_type%" WITH
			"[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x44) "%___#primary_type%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~primary_type~ must be an integer greater or equal than 0 (you provided ~%___#primary_type%~)"
		END

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x4c) ___#lowestafflvl
		PATCH_MATCH "%___#lowestafflvl%" WITH
			"[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x4c) "%___#lowestafflvl%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~lowestafflvl~ must be an integer greater or equal than 0 (you provided ~%___#lowestafflvl%~)"
		END

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x50) ___#highestafflvl
		PATCH_MATCH "%___#highestafflvl%" WITH
			"[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x50) "%___#highestafflvl%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~highestafflvl~ must be an integer greater or equal than 0 (you provided ~%___#highestafflvl%~)"
		END

		// Only a value of 0 should matter here...
		//WRITE_LONG (fx_off + inserted * 0x108 + 0x54) ___#resist_dispel
		PATCH_MATCH "%___#resist_dispel%" WITH
			"0" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x54) "%___#resist_dispel%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~resist_dispel~ must be an integer greater or equal than 0 (you provided ~%___#resist_dispel%~)"
		END

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x58) ___#parameter3
		PATCH_MATCH "%___#parameter3%" WITH
			"[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x58) "%___#parameter3%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~parameter3~ must be an integer greater or equal than 0 (you provided ~%___#parameter3%~)"
		END

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x5c) ___#parameter4
		PATCH_MATCH "%___#parameter4%" WITH
			"[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x5c) "%___#parameter4%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~parameter4~ must be an integer greater or equal than 0 (you provided ~%___#parameter4%~)"
		END

		WRITE_EVALUATED_ASCII ("%fx_off%" + "%inserted%" * 0x108 + 0x68) ~%___#vvcresource%~ #8

		WRITE_EVALUATED_ASCII ("%fx_off%" + "%inserted%" * 0x108 + 0x70) ~%___#resource2%~ #8

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x78) ___#casterx
		PATCH_MATCH "%___#casterx%" WITH
			"[0-9]+" "-1" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x78) "%___#casterx%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~casterx~ must be an integer greater or equal than ~-1~ (you provided ~%___#casterx%~)"
		END

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x7c) ___#castery
		PATCH_MATCH "%___#castery%" WITH
			"[0-9]+" "-1" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x7c) "%___#castery%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~castery~ must be an integer greater or equal than ~-1~ (you provided ~%___#castery%~)"
		END

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x80) ___#targetx
		PATCH_MATCH "%___#targetx%" WITH
			"[0-9]+" "-1" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x80) "%___#targetx%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~targetx~ must be an integer greater or equal than ~-1~ (you provided ~%___#targetx%~)"
		END

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x84) ___#targety
		PATCH_MATCH "%___#targety%" WITH
			"[0-9]+" "-1" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x84) "%___#targety%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~targety~ must be an integer greater or equal than ~-1~ (you provided ~%___#targety%~)"
		END

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x88)  ___#restype
		PATCH_MATCH "%___#restype%" WITH
			"[0-2]" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x88) "%___#restype%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~restype~ must be an integer belonging to the interval [0,2] (you provided ~%___#restype%~)"
		END

		WRITE_EVALUATED_ASCII ("%fx_off%" + "%inserted%" * 0x108 + 0x8c) ~%___#effsource%~ #8

		//WRITE_LONG (fx_off + inserted * 0x108 + 0x9c)  ___#sourceslot
		PATCH_MATCH "%___#sourceslot%" WITH
			"-1" "[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0x9c) "%___#sourceslot%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~sourceslot~ must be an integer greater or equal than -1 (you provided ~%___#sourceslot%~)"
		END

		WRITE_EVALUATED_ASCII ("%fx_off%" + "%inserted%" * 0x108 + 0xa0) ~%___#effvar%~ #32

		//WRITE_LONG (fx_off + inserted * 0x108 + 0xc0) ___#casterlvl
		PATCH_MATCH "%___#casterlvl%" WITH
			"[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0xc0) "%___#casterlvl%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~casterlvl~ must be an integer greater or equal than 0 (you provided ~%___#casterlvl%~)"
		END

		//WRITE_LONG (fx_off + inserted * 0x108 + 0xc8) ___#secondary_type
		PATCH_MATCH "%___#secondary_type%" WITH
			"[0-9]+" BEGIN
				WRITE_LONG ("%fx_off%" + "%inserted%" * 0x108 + 0xc8) "%___#secondary_type%"
			END
			DEFAULT
				PATCH_FAIL "~%DEST_FILE%~, ___#ADD_CRE_EFFECT: ~secondary_type~ must be an integer greater or equal than 0 (you provided ~%___#secondary_type%~)"
		END

		//correcting effects number
		WRITE_LONG 0x2c8 ("%fx_num%" + 1)

		//correcting offsets
		PATCH_FOR_EACH "offset" IN "0x2b8" "0x2bc" BEGIN //item num and islot
			READ_LONG "%offset%" "current_off"
			WRITE_LONG "%offset%" ("%current_off%" + 0x108)
		END
	END
END